import tkinter as tk


class Funcionario:
    def __init__(self, nome, idade):
        self.nome = nome
        self.idade = idade

    def calcular_salario(self):
        raise NotImplementedError("Este método deve ser implementado nas subclasses.")


class Administrativo(Funcionario):
    def __init__(self, nome, idade, salario_base):
        super().__init__(nome, idade)
        self.salario_base = salario_base

    def calcular_salario(self):
        return self.salario_base


class Professor(Funcionario):
    def __init__(self, nome, idade, salario_base, horas_aula):
        super().__init__(nome, idade)
        self.salario_base = salario_base
        self.horas_aula = horas_aula

    def calcular_salario(self):
        return self.salario_base + (self.horas_aula * 50)  # Exemplo de cálculo com base nas horas aula


class Tecnico(Funcionario):
    def __init__(self, nome, idade, salario_base, horas_extras):
        super().__init__(nome, idade)
        self.salario_base = salario_base
        self.horas_extras = horas_extras

    def calcular_salario(self):
        return self.salario_base + (self.horas_extras * 30)  # Exemplo de cálculo com base nas horas extras


def cadastrar_funcionario():
    nome = entry_nome.get()
    idade = entry_idade.get()
    tipo_funcionario = var_tipo_funcionario.get()

    try:
        idade = int(idade)
        if tipo_funcionario == 'Administrativo':
            salario_base = float(entry_salario.get())
            funcionario = Administrativo(nome, idade, salario_base)
        elif tipo_funcionario == 'Professor':
            horas_aula = int(entry_horas_aula.get())
            salario_base = float(entry_salario.get())
            funcionario = Professor(nome, idade, salario_base, horas_aula)
        elif tipo_funcionario == 'Técnico':
            horas_extras = int(entry_horas_extras.get())
            salario_base = float(entry_salario.get())
            funcionario = Tecnico(nome, idade, salario_base, horas_extras)
        else:
            resultado_var.set("Tipo de funcionário inválido")
            return

        salario = funcionario.calcular_salario()
        resultado_var.set(f"Funcionário {nome} cadastrado com salário de R${salario:.2f}")
    except ValueError:
        resultado_var.set("Por favor, insira dados válidos!")


root = tk.Tk()
root.title("Sistema de Gestão de Funcionários")


tk.Label(root, text="Nome:").grid(row=0, column=0)
entry_nome = tk.Entry(root)
entry_nome.grid(row=0, column=1)

tk.Label(root, text="Idade:").grid(row=1, column=0)
entry_idade = tk.Entry(root)
entry_idade.grid(row=1, column=1)

tk.Label(root, text="Salário Base:").grid(row=2, column=0)
entry_salario = tk.Entry(root)
entry_salario.grid(row=2, column=1)

tk.Label(root, text="Tipo de Funcionário:").grid(row=3, column=0)
var_tipo_funcionario = tk.StringVar(value="Administrativo")
tk.Radiobutton(root, text="Administrativo", variable=var_tipo_funcionario, value="Administrativo").grid(row=3, column=1)
tk.Radiobutton(root, text="Professor", variable=var_tipo_funcionario, value="Professor").grid(row=3, column=2)
tk.Radiobutton(root, text="Técnico", variable=var_tipo_funcionario, value="Técnico").grid(row=3, column=3)

tk.Label(root, text="Horas Aula (para Professores):").grid(row=4, column=0)
entry_horas_aula = tk.Entry(root)
entry_horas_aula.grid(row=4, column=1)

tk.Label(root, text="Horas Extras (para Técnicos):").grid(row=5, column=0)
entry_horas_extras = tk.Entry(root)
entry_horas_extras.grid(row=5, column=1)


btn_cadastrar = tk.Button(root, text="Cadastrar Funcionário", command=cadastrar_funcionario)
btn_cadastrar.grid(row=6, column=0, columnspan=4)


resultado_var = tk.StringVar()
label_resultado = tk.Label(root, textvariable=resultado_var, font=('Arial', 12), fg='green')
label_resultado.grid(row=7, column=0, columnspan=4)


root.mainloop()















